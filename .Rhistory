library(readxl)
dataset1_tft <- read_excel("~/Papeleo/dataset1_tft.xlsx")
View(dataset1_tft)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- dataset1_tft
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
# # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(mca)
# # Para la descripción de las dimensiones
# # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# "proba" es el coeficiente de significacion
descripcion_dimensiones <- dimdesc(mca, axes=1:12, proba = 0.01)
exportar_caracterizacion_dimensiones(descripcion_dimensiones, 12)
#Saco el nuevo dataset con los nuevos nombres de variables para tratarlo más fácil
new_dataset <- as.data.frame(mca$ind$coord)
#cambio el nombre de las variables
nuevos_nombres <- c("1.Nivel de problemas sociales",
"2.JoverParado-ismo",
"3.AmaDeCasa-ismo",
"4.TyrionLannister-ismo",
"5.DivorciadoNini-ismo",
"6.ViejaGloria-ismo",
"7.NiTrabajoNiAhorro-ismo",
"8.FPsoltero-ismo",
"9.DivorciadaQuiereTrabajar-ismo",
"10.MayorSinEducación-ismo",
"11.SensorialSinPensión-ismo",
"12.PadreQueCamina-ismo" )
colnames(new_dataset) <- nuevos_nombres
# Llamadas a cada una de las clusterizaciones, descomentar la que se quiera
# Para saber el número de clusteres de ambos casos, mirar la consola
calcular_k(new_dataset)
num_clusters <- 8
kmeans <- test_kmeans(new_dataset, num_clusters)
calcular_centroides(new_dataset)
cmeans <- test_cmeans(new_dataset, 10)
knn <- test_knn(new_dataset)
#Kmodes necesita categoricas, lo cual implica que
# no podemos usar el dataset de dimensionalidad reducida
calcular_modas(dataset)
kmodes <- test_kmodes(dataset, 8) #aquí va el número de modas
#el som requiere dos pasos, el som y el kmeans
modelo_som <- test_som(new_dataset)
calcular_k(modelo_som$codes[[1]])
num_clusters <-  8
som <- test_kmeans(modelo_som$codes[[1]], num_clusters)
# Funciones para imprimer gráficas
print_membresia_kmeans(kmeans, new_dataset)
print_membresia_cmeans(cmeans, new_dataset)
print_membresia_kmodes(kmodes, dataset)
print_membresia_knn(knn, new_dataset)
print_membresia_som(som, modelo_som)
# #Script para el analisis post cluster
analisis_post_cluster(new_dataset, kmeans, cmeans, knn, modelo_som, som)
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
View(dataset)
View(dataset1_tft)
View(dataset1_tft)
library(readxl)
dataset1_tft <- read_excel("~/Papeleo/dataset1_tft.xlsx",
sheet = "datos_sf_sin_variables_inutiles")
View(dataset1_tft)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- dataset1_tft
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
# # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(mca)
# # Para la descripción de las dimensiones
# # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# "proba" es el coeficiente de significacion
descripcion_dimensiones <- dimdesc(mca, axes=1:12, proba = 0.01)
exportar_caracterizacion_dimensiones(descripcion_dimensiones, 12)
#Saco el nuevo dataset con los nuevos nombres de variables para tratarlo más fácil
new_dataset <- as.data.frame(mca$ind$coord)
#cambio el nombre de las variables
nuevos_nombres <- c("1.Nivel de problemas sociales",
"2.JoverParado-ismo",
"3.AmaDeCasa-ismo",
"4.TyrionLannister-ismo",
"5.DivorciadoNini-ismo",
"6.ViejaGloria-ismo",
"7.NiTrabajoNiAhorro-ismo",
"8.FPsoltero-ismo",
"9.DivorciadaQuiereTrabajar-ismo",
"10.MayorSinEducación-ismo",
"11.SensorialSinPensión-ismo",
"12.PadreQueCamina-ismo" )
colnames(new_dataset) <- nuevos_nombres
# Llamadas a cada una de las clusterizaciones, descomentar la que se quiera
# Para saber el número de clusteres de ambos casos, mirar la consola
calcular_k(new_dataset)
num_clusters <- 8
kmeans <- test_kmeans(new_dataset, num_clusters)
calcular_centroides(new_dataset)
cmeans <- test_cmeans(new_dataset, 10)
knn <- test_knn(new_dataset)
#Kmodes necesita categoricas, lo cual implica que
# no podemos usar el dataset de dimensionalidad reducida
calcular_modas(dataset)
kmodes <- test_kmodes(dataset, 8) #aquí va el número de modas
#el som requiere dos pasos, el som y el kmeans
modelo_som <- test_som(new_dataset)
calcular_k(modelo_som$codes[[1]])
num_clusters <-  8
som <- test_kmeans(modelo_som$codes[[1]], num_clusters)
# Funciones para imprimer gráficas
print_membresia_kmeans(kmeans, new_dataset)
print_membresia_cmeans(cmeans, new_dataset)
print_membresia_kmodes(kmodes, dataset)
print_membresia_knn(knn, new_dataset)
print_membresia_som(som, modelo_som)
# #Script para el analisis post cluster
analisis_post_cluster(new_dataset, kmeans, cmeans, knn, modelo_som, som)
View(dataset1_tft)
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
View(dataset)
View(dataset1_tft)
View(dataset)
View(dataset1_tft)
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
View(dataset)
View(dataset)
dataset[,column] <- as.factor(dataset[,column])
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
View(dataset)
#factorizamos todas las columnas del dataset1
for (column in 1:ncol(dataset)){
dataset[,column] <- as.factor(dataset[,column])
}
View(dataset)
View(dataset1_tft)
dataset1_tft <- as.factor(dataset1_tft)
library(readxl)
dataset1_tft <- read_excel("~/Papeleo/dataset1_tft.xlsx",
sheet = "datos_sf_sin_variables_inutiles")
View(dataset1_tft)
dataset <- dataset1_tft
View(dataset)
dataset[, 1] <- as.factor(dataset[,1])
View(dataset)
dataset <- as.data.frame(dataset1_tft)
View(dataset)
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
View(mca)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- as.data.frame(dataset1_tft)
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
# # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(mca)
# # Para la descripción de las dimensiones
# # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# "proba" es el coeficiente de significacion
descripcion_dimensiones <- dimdesc(mca, axes=1:12, proba = 0.01)
exportar_caracterizacion_dimensiones(descripcion_dimensiones, 12)
#Saco el nuevo dataset con los nuevos nombres de variables para tratarlo más fácil
new_dataset <- as.data.frame(mca$ind$coord)
#cambio el nombre de las variables
nuevos_nombres <- c("1.Nivel de problemas sociales",
"2.JoverParado-ismo",
"3.AmaDeCasa-ismo",
"4.TyrionLannister-ismo",
"5.DivorciadoNini-ismo",
"6.ViejaGloria-ismo",
"7.NiTrabajoNiAhorro-ismo",
"8.FPsoltero-ismo",
"9.DivorciadaQuiereTrabajar-ismo",
"10.MayorSinEducación-ismo",
"11.SensorialSinPensión-ismo",
"12.PadreQueCamina-ismo" )
colnames(new_dataset) <- nuevos_nombres
# Llamadas a cada una de las clusterizaciones, descomentar la que se quiera
# Para saber el número de clusteres de ambos casos, mirar la consola
calcular_k(new_dataset)
num_clusters <- 8
kmeans <- test_kmeans(new_dataset, num_clusters)
calcular_centroides(new_dataset)
cmeans <- test_cmeans(new_dataset, 10)
knn <- test_knn(new_dataset)
#Kmodes necesita categoricas, lo cual implica que
# no podemos usar el dataset de dimensionalidad reducida
calcular_modas(dataset)
kmodes <- test_kmodes(dataset, 8) #aquí va el número de modas
#el som requiere dos pasos, el som y el kmeans
modelo_som <- test_som(new_dataset)
calcular_k(modelo_som$codes[[1]])
num_clusters <-  8
som <- test_kmeans(modelo_som$codes[[1]], num_clusters)
# Funciones para imprimer gráficas
print_membresia_kmeans(kmeans, new_dataset)
print_membresia_cmeans(cmeans, new_dataset)
print_membresia_kmodes(kmodes, dataset)
print_membresia_knn(knn, new_dataset)
print_membresia_som(som, modelo_som)
# #Script para el analisis post cluster
analisis_post_cluster(new_dataset, kmeans, cmeans, knn, modelo_som, som)
library(readxl)
dataset1_tft <- read_excel("~/Papeleo/dataset1_tft.xlsx",
sheet = "datos_sf_sin_variables_inutiles")
View(dataset1_tft)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- as.data.frame(dataset1_tft)
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
# # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(mca)
# # Para la descripción de las dimensiones
# # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# "proba" es el coeficiente de significacion
descripcion_dimensiones <- dimdesc(mca, axes=1:12, proba = 0.01)
exportar_caracterizacion_dimensiones(descripcion_dimensiones, 12)
#Saco el nuevo dataset con los nuevos nombres de variables para tratarlo más fácil
new_dataset <- as.data.frame(mca$ind$coord)
#cambio el nombre de las variables
nuevos_nombres <- c("1.Nivel de problemas sociales",
"2.JoverParado-ismo",
"3.AmaDeCasa-ismo",
"4.TyrionLannister-ismo",
"5.DivorciadoNini-ismo",
"6.ViejaGloria-ismo",
"7.NiTrabajoNiAhorro-ismo",
"8.FPsoltero-ismo",
"9.DivorciadaQuiereTrabajar-ismo",
"10.MayorSinEducación-ismo",
"11.SensorialSinPensión-ismo",
"12.PadreQueCamina-ismo" )
colnames(new_dataset) <- nuevos_nombres
# Llamadas a cada una de las clusterizaciones, descomentar la que se quiera
# Para saber el número de clusteres de ambos casos, mirar la consola
calcular_k(new_dataset)
num_clusters <- 8
kmeans <- test_kmeans(new_dataset, num_clusters)
calcular_centroides(new_dataset)
cmeans <- test_cmeans(new_dataset, 10)
knn <- test_knn(new_dataset)
#Kmodes necesita categoricas, lo cual implica que
# no podemos usar el dataset de dimensionalidad reducida
calcular_modas(dataset)
kmodes <- test_kmodes(dataset, 8) #aquí va el número de modas
#el som requiere dos pasos, el som y el kmeans
modelo_som <- test_som(new_dataset)
calcular_k(modelo_som$codes[[1]])
num_clusters <-  8
som <- test_kmeans(modelo_som$codes[[1]], num_clusters)
# Funciones para imprimer gráficas
print_membresia_kmeans(kmeans, new_dataset)
print_membresia_cmeans(cmeans, new_dataset)
print_membresia_kmodes(kmodes, dataset)
print_membresia_knn(knn, new_dataset)
print_membresia_som(som, modelo_som)
# #Script para el analisis post cluster
analisis_post_cluster(new_dataset, kmeans, cmeans, knn, modelo_som, som)
print_membresia_kmodes <- function(clusterizacion, dataset){
#sustituyo los valores por colores
colores <- c("red", "blue", "green", "magenta", "darkgoldenrod2", "darkgreen", "cyan", "yellow")
for(c in 1:length(unique(clusterizacion$cluster))){
clusterizacion$cluster <- replace(clusterizacion$cluster,
clusterizacion$cluster==c,
colores[c])
}
print(table(clusterizacion$cluster))
}
print_membresia_kmodes(kmodes, dataset)
library(readxl)
dataset2_tft <- read_excel("~/Papeleo/dataset2_tft.xlsx")
View(dataset2_tft)
library(readxl)
dataset2_tft <- read_excel("~/Papeleo/dataset2_tft.xlsx",
sheet = "columnas_utiles")
View(dataset2_tft)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- as.data.frame(dataset2_tft)
pca <- principal_component_analysis(dataset)
# # # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(pca)
# # # Para la descripción de las dimensiones
# # # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# # # "proba" es el coeficiente de significacion
# descripcion_dimensiones <- dimdesc(pca, axes=1:5, proba = 0.01)
# exportar_caracterizacion_dimensiones2(descripcion_dimensiones, 5)
#Saco el nuevo dataset con los nuevos nombres de variables para tratarlo más fácil
new_dataset <- as.data.frame(pca$ind$coord)
#cambio el nombre de las variables
nuevos_nombres <- c("1.Dinero-ismo",
"2.Tamaño-campaña-y-equipo-ismo",
"3.Todo-menos-dinero-y-duración-ismo",
"4.Muchos-años-pocas-personas-ismo",
"5.Inversiores-tardan-equipo-pequeño-ismo")
colnames(new_dataset) <- nuevos_nombres
# Llamadas a cada una de las clusterizaciones, descomentar la que se quiera
calcular_k(new_dataset)
num_clusters <- 6
kmeans <- test_kmeans(new_dataset, num_clusters)
calcular_centroides(new_dataset)
cmeans <- test_cmeans(new_dataset, 2)
knn <- test_knn(new_dataset)
#Kmodes necesita categoricas, lo cual implica que
# no podemos usar el dataset2
# el som requiere dos pasos
# esto es por tener un nivel de abstracción mayor
modelo_som <- test_som(new_dataset)
calcular_k(modelo_som$codes[[1]])
num_clusters <-  6
som <- test_kmeans(modelo_som$codes[[1]], num_clusters)
# print_membresia_kmeans(kmeans, dataset)
# print_membresia_cmeans(cmeans, dataset)
print_membresia_knn(knn, dataset)
# print_membresia_som(som, modelo_som)
#Script para el analisis post cluster
# analisis_post_cluster(new_dataset, kmeans, cmeans, knn, modelo_som, som)
getwd()
paste0(getwd(), "test.xlsx")
paste0(getwd(), "/test.xlsx")
library(readxl)
dataset1_tft <- read_excel("~/Papeleo/dataset1_tft.xlsx",
sheet = "datos_sf_sin_variables_inutiles")
View(dataset1_tft)
source("reduccion_dimensionalidad.R")
source("export_excel.R")
source("print_membresia.R")
source("calcular_k.R")
source("algoritmos.R")
source("analisis_post_cluster.R")
library(clValid) #para índice de Dunn
library(klaR) #para Kmodes
library(dplyr)  #para usar las funciones de manejo de dataframes
#una de las dependencias de klaR sobreescribe select de dplyr
library(XLConnect)
library(e1071)  #para Cmeans
library(dbscan) #para sNN
library(clusterSim) #para los índices del análisis post-cluster
library(kohonen)  #para el SOM
library(FactoMineR) #dimensionality reduction, MCA
library(XLConnect)  #para exportar en Excel
library(plotrix)  #para algunas utilidades adjuntas a plot()
dataset <- as.data.frame(dataset1_tft)
#MCA para reducir la dimensionalidad
mca <- multiple_correspondence_analysis(dataset) #el número del dataset, 1 o 2
# # Exporto a excel para estudiar las dimensiones creadas
# exportar_eigenvalues_dimensiones(mca)
# # Para la descripción de las dimensiones
# # recomiendo hacer export a excel, que permite interpretar mejor los resultados
# "proba" es el coeficiente de significacion
descripcion_dimensiones <- dimdesc(mca, axes=1:12, proba = 0.01)
exportar_caracterizacion_dimensiones(descripcion_dimensiones, 12)
install.packages("clValid")
source('~/Papeleo/tft/main_script.R', encoding = 'UTF-8')
source('~/Papeleo/tft/main_script.R', encoding = 'UTF-8')
